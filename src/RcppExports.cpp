// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tokenize_name
std::vector<std::string> tokenize_name(const std::string& name, int nchar_min);
RcppExport SEXP _nmatch_tokenize_name(SEXP nameSEXP, SEXP nchar_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type nchar_min(nchar_minSEXP);
    rcpp_result_gen = Rcpp::wrap(tokenize_name(name, nchar_min));
    return rcpp_result_gen;
END_RCPP
}
// nmatch_cpp
IntegerMatrix nmatch_cpp(const CharacterVector& x, const CharacterVector& y, int nchar_min);
RcppExport SEXP _nmatch_nmatch_cpp(SEXP xSEXP, SEXP ySEXP, SEXP nchar_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nchar_min(nchar_minSEXP);
    rcpp_result_gen = Rcpp::wrap(nmatch_cpp(x, y, nchar_min));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nmatch_tokenize_name", (DL_FUNC) &_nmatch_tokenize_name, 2},
    {"_nmatch_nmatch_cpp", (DL_FUNC) &_nmatch_nmatch_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_nmatch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
