[{"path":"https://epicentre-msf.github.io/nmatch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Barks. Author, maintainer.","code":""},{"path":"https://epicentre-msf.github.io/nmatch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barks P (2024). nmatch: Fuzzy Matching Proper Names. R package version 0.1.0, https://github.com/epicentre-msf/nmatch.","code":"@Manual{,   title = {nmatch: Fuzzy Matching For Proper Names},   author = {Patrick Barks},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/epicentre-msf/nmatch}, }"},{"path":"https://epicentre-msf.github.io/nmatch/index.html","id":"nmatch-fuzzy-matching-for-proper-names","dir":"","previous_headings":"","what":"Fuzzy Matching For Proper Names","title":"Fuzzy Matching For Proper Names","text":"Compare match proper names different sources, accounting potential variation format, name order, spelling (e.g. “Beyoncé Knowles” vs. “KNOWLES-CARTER, Beyonce”). Specifically, uses string-standardization account variation punctuation, accents, character case, token-permutation account variation name order, fuzzy matching handle alternate spellings.","code":""},{"path":"https://epicentre-msf.github.io/nmatch/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fuzzy Matching For Proper Names","text":"Install GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"epicentre-msf/nmatch\")"},{"path":"https://epicentre-msf.github.io/nmatch/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Fuzzy Matching For Proper Names","text":"","code":"library(nmatch) library(dplyr) library(purrr) library(tidyr)  # example data with names to compare data(\"names_ex\")  # compare with default settings names_ex %>%    mutate(is_match = nmatch(name_source1, name_source2)) #>                  name_source1           name_source2 is_match #> 1             Beyoncé Knowles Beyonce Knowles-Carter     TRUE #> 2    Frédéric François Chopin    CHOPIN, Fryderyk F.    FALSE #> 3    Kendrick Lamar Duckworth         LAMAR, Kendrik     TRUE #> 4 Calvin Cordozar Broadus Jr.             Snoop Dogg    FALSE #> 5 Céline Marie Claudette Dion           DION, Céline     TRUE #> 6         Aubrey Drake Graham                  Drake    FALSE  # return full match details names_ex %>%    mutate(match_df = purrr::map2(name_source1, name_source2, nmatch, return_full = TRUE)) %>%    tidyr::unnest(\"match_df\") #> # A tibble: 6 × 11 #>   name_source1                name_source2     is_match    id   k_x   k_y k_align n_match dist_total freq_score align    #>   <chr>                       <chr>            <lgl>    <int> <int> <int>   <int>   <int>      <int> <chr>      <list>   #> 1 Beyoncé Knowles             Beyonce Knowles… TRUE         1     2     3       2       2          0 <NA>       <tibble> #> 2 Frédéric François Chopin    CHOPIN, Frydery… FALSE        1     3     2       2       1          3 <NA>       <tibble> #> 3 Kendrick Lamar Duckworth    LAMAR, Kendrik   TRUE         1     3     2       2       2          1 <NA>       <tibble> #> 4 Calvin Cordozar Broadus Jr. Snoop Dogg       FALSE        1     4     2       2       0         10 <NA>       <tibble> #> 5 Céline Marie Claudette Dion DION, Céline     TRUE         1     4     2       2       2          0 <NA>       <tibble> #> 6 Aubrey Drake Graham         Drake            FALSE        1     3     1       1       1          0 <NA>       <tibble>  # use a custom function to classify matches, based on any of the vars returned # when return_full = TRUE (i.e. k_x, k_y, k_align, n_match, dist_total) # note that fn must include argument `...` even if not used classify_matches <- function(k_align, dist_total, ...) {   k_align >= 1 & dist_total <= 3 }  names_ex %>%    mutate(is_match = nmatch(name_source1, name_source2, eval_fn = classify_matches)) #>                  name_source1           name_source2 is_match #> 1             Beyoncé Knowles Beyonce Knowles-Carter     TRUE #> 2    Frédéric François Chopin    CHOPIN, Fryderyk F.     TRUE #> 3    Kendrick Lamar Duckworth         LAMAR, Kendrik     TRUE #> 4 Calvin Cordozar Broadus Jr.             Snoop Dogg    FALSE #> 5 Céline Marie Claudette Dion           DION, Céline     TRUE #> 6         Aubrey Drake Graham                  Drake     TRUE"},{"path":"https://epicentre-msf.github.io/nmatch/index.html","id":"using-with-fuzzyjoin","dir":"","previous_headings":"Example usage","what":"Using with fuzzyjoin","title":"Fuzzy Matching For Proper Names","text":"Note matching large datasets using fuzzy_join() nmatch() may slow. nmatch package eventually contain stand-alone join functions optimized name-matching.","code":"library(fuzzyjoin)  # example hospital datasets (IPD and ICU) with patients names in different # formats (note these names are just random combinations of common French names) data(\"dat_ipd\") data(\"dat_icu\")  # join IPD and ICU datasets by name variables, using fuzzy matching with nmatch() fuzzyjoin::fuzzy_join(   dat_ipd,   dat_icu,   by = c(\"name_ipd\" = \"name_icu\"),   match_fun = nmatch::nmatch,   mode = \"left\" ) #> # A tibble: 10 × 4 #>    name_ipd                           date_ipd   name_icu                 date_icu   #>    <chr>                              <date>     <chr>                    <date>     #>  1 COLLET, André Daniel               2020-07-17 André D. Colet           2020-07-19 #>  2 LÈFEVRE, Françoise Sylvie          2020-06-03 Francoise Lefevre        2020-06-05 #>  3 DUBOIS, Monique Léa                2020-06-10 Monique Léa Dubois       2020-06-14 #>  4 GUÉRIN, Jacqueline Hélène          2020-07-09 Jacqueline Hélène Guérin 2020-07-09 #>  5 MARTIN, Philippe Arnaud            2020-06-11 <NA>                     NA         #>  6 DUMONT, René Stéphane              2020-07-26 Renae  Dumont            2020-07-29 #>  7 LÉVEILLÉ, Anne-Charlotte Catherine 2020-06-01 <NA>                     NA         #>  8 MARCHAND, Louis Enzo               2020-07-17 <NA>                     NA         #>  9 SANCHEZ, Isabelle Suzanne          2020-07-03 <NA>                     NA         #> 10 ROUX, Nathalie Elisabeth           2020-07-06 Natalia Roux             2020-07-06"},{"path":"https://epicentre-msf.github.io/nmatch/reference/dat_hospital.html","id":null,"dir":"Reference","previous_headings":"","what":"Example hospital datasets containing proper names in different formats — dat_hospital","title":"Example hospital datasets containing proper names in different formats — dat_hospital","text":"Example hospital datasets, one -patient department (dat_ipd), ICU department (dat_icu). datasets contain common patients variation names written. Note data fake – patient names simply random combinations common French names.","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/dat_hospital.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example hospital datasets containing proper names in different formats — dat_hospital","text":"Data frames two columns: name_ipd/name_icu patient name date_ipd/date_icu date entry given department","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate token match details to determine overall match status — match_eval","title":"Evaluate token match details to determine overall match status — match_eval","text":"Evaluate token match details determine overall match status","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate token match details to determine overall match status — match_eval","text":"","code":"match_eval(k_x, k_y, n_match, n_match_crit, ...)"},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate token match details to determine overall match status — match_eval","text":"k_x Integer vector specifying number tokens names x k_y Integer vector specifying number tokens names y n_match Integer vector specifying number aligned tokens x y matching (.e. based argument dist_max nmatch) n_match_crit Minimum number matching tokens names x y considered overall match ... Additional arguments (used)","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate token match details to determine overall match status — match_eval","text":"Logical vector indicating whether names x y match, based token match details provided arguments","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate string distance and token lengths to determine whether two tokens match — match_eval_token","title":"Evaluate string distance and token lengths to determine whether two tokens match — match_eval_token","text":"Evaluate string distance token lengths determine whether two tokens match","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate string distance and token lengths to determine whether two tokens match — match_eval_token","text":"","code":"match_eval_token(nchar_x, nchar_y, nchar_max, dist, ...)"},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate string distance and token lengths to determine whether two tokens match — match_eval_token","text":"nchar_x Number characters token x nchar_y Number characters token y nchar_max max(c(x_nchar, y_nchar)) dist String distance tokens x y ... Additional arguments (used)","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/match_eval_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate string distance and token lengths to determine whether two tokens match — match_eval_token","text":"Logical vector indicating whether tokens x y match, based respective lengths string distance ","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/name_standardize.html","id":null,"dir":"Reference","previous_headings":"","what":"String standardization — name_standardize","title":"String standardization — name_standardize","text":"Standardize strings prior performing match, using following transformations: standardize case (base::toupper) remove accents/diacritics (stringi::stri_trans_general) replace punctuation characters whitespace remove extraneous space characters (stringr::str_squish)","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/name_standardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String standardization — name_standardize","text":"","code":"name_standardize(x)"},{"path":"https://epicentre-msf.github.io/nmatch/reference/name_standardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String standardization — name_standardize","text":"x string","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/name_standardize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String standardization — name_standardize","text":"standardized version x","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/name_standardize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String standardization — name_standardize","text":"","code":"name_standardize(\"angela_merkel\") #> [1] \"ANGELA MERKEL\" name_standardize(\"QUOIREZ, Fran\\U00E7oise D.\") #> [1] \"QUOIREZ FRANCOISE D\""},{"path":"https://epicentre-msf.github.io/nmatch/reference/names_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data with proper names from two different sources — names_ex","title":"Example data with proper names from two different sources — names_ex","text":"Example data proper names two different sources","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/names_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data with proper names from two different sources — names_ex","text":"","code":"names_ex"},{"path":"https://epicentre-msf.github.io/nmatch/reference/names_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data with proper names from two different sources — names_ex","text":"data.frame 6 rows 2 variables, class character: name_source1 name source 1 name_source2 name source 2","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/nmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare sets of proper names accounting for common types of variation in format and style — nmatch","title":"Compare sets of proper names accounting for common types of variation in format and style — nmatch","text":"Compare proper names across two sources using string-standardization account variation punctuation, accents, character case, token-permutation account variation name order, fuzzy matching handle alternate spellings. specific steps : Standardize strings. default function name_standardize removes accents punctuation, standardizes case, removes extra whitespace. E.g. \"Brontë, Emily J.\" standardized \"BRONTE EMILY J\". Tokenize standardized names, optionally retaining tokens larger given nchar limit. pair names, calculate string distance combinations tokens, find best overall token alignment (.e. alignment minimizes summed string distance). two names compared differ number tokens, alignment made respect smaller number tokens. E.g. comparing \"Angela Dorothea Merkel\" \"Merkel Angela\", token \"Dorothea\" ultimately omitted best alignment. pair tokens best alignment, classify whether tokens match (TRUE/FALSE) based respective lengths string distance . Summarize number tokens name, number tokens best alignment, number aligned tokens match, summed string distance best alignment. Classify overall match status (TRUE/FALSE) based match details described (5). default, two names considered matching two tokens match across names (e.g. \"Merkel Angela\" matches \"Angela Dorothea Merkel\"), names consist single token matching (e.g. \"Beyonce\" matches \"Beyoncé\").","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/nmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare sets of proper names accounting for common types of variation in format and style — nmatch","text":"","code":"nmatch(   x,   y,   token_split = \"[-_[:space:]]+\",   nchar_min = 2L,   dist_method = \"osa\",   std = name_standardize,   ...,   return_full = FALSE,   eval_fn_token = match_eval_token,   eval_fn = match_eval,   eval_params = list(n_match_crit = 2),   token_freq = NULL )"},{"path":"https://epicentre-msf.github.io/nmatch/reference/nmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare sets of proper names accounting for common types of variation in format and style — nmatch","text":"x, y Vectors proper names compare. Must length. token_split Regex pattern split strings tokens. Defaults \"[-_[:space:]]+\", splits sequence one dash, underscore, space character. nchar_min Minimum token size compare. Defaults 2L. dist_method Method use string distance calculation (see stringdist-metrics). Defaults \"osa\". std Function standardize strings matching. Defaults name_standardize. Set NULL omit standardization. ... additional arguments passed std() return_full Logical indicating whether return data frame full summary match details (TRUE), logical vector corresponding final match status (FALSE). Defaults FALSE. eval_fn_token Function determine token match status. Defaults match_eval_token. See section Custom classification functions details. eval_fn Function determine overall match status. Defaults match_eval. See section Custom classification functions details. eval_params List additional arguments passed eval_fn token_freq Optional data frame containing frequencies name tokens within population interest. Must two columns token_std: standardized tokens (using function std) freq: token frequency","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/nmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare sets of proper names accounting for common types of variation in format and style — nmatch","text":"return_full = FALSE (default), returns logical vector indicating elements x y matches. return_full = TRUE, returns tibble-style data frame summarizing match details, including columns: is_match: logical vector indicating overall match status k_x: number tokens x (excludes tokens smaller nchar_min) k_y: number tokens y (excludes tokens smaller nchar_min) k_align: number aligned tokens (.e. min(k_x, k_y)) n_match: number aligned tokens match (.e. distance <= dist_max) dist_total: summed string distance across aligned tokens","code":""},{"path":"https://epicentre-msf.github.io/nmatch/reference/nmatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare sets of proper names accounting for common types of variation in format and style — nmatch","text":"","code":"names1 <- c(   \"Angela Dorothea Merkel\",   \"Emmanuel Jean-Michel Fr\\u00e9d\\u00e9ric Macron\",   \"Mette Frederiksen\",   \"Katrin Jakobsd\\u00f3ttir\",   \"Pedro S\\u00e1nchez P\\u00e9rez-Castej\\u00f3n\" )  names2 <- c(   \"MERKEL, Angela\",   \"MACRON, Emmanuel J.-M. F.\",   \"FREDERICKSON, Mette\",   \"JAKOBSDOTTIR  Kathríne\",   \"PEREZ-CASTLEJON, Pedro\" )  # return logical vector specifying which names are matches nmatch(names1, names2) #> [1] TRUE TRUE TRUE TRUE TRUE  # return data frame with full match details nmatch(names1, names2, return_full = TRUE) #> # A tibble: 5 × 9 #>   is_match    id   k_x   k_y k_align n_match dist_total freq_score align    #>   <lgl>    <int> <int> <int>   <int>   <int>      <int> <chr>      <list>   #> 1 TRUE         1     3     2       2       2          0 NA         <tibble> #> 2 TRUE         2     5     2       2       2          0 NA         <tibble> #> 3 TRUE         3     2     2       2       2          2 NA         <tibble> #> 4 TRUE         4     2     2       2       2          2 NA         <tibble> #> 5 TRUE         5     4     3       3       3          1 NA         <tibble>  # use a custom function to classify matches classify_matches <- function(k_align, n_match, dist_total, ...) {   n_match == k_align & dist_total < 2 }  nmatch(names1, names2, return_full = TRUE, eval_fn = classify_matches) #> # A tibble: 5 × 9 #>   is_match    id   k_x   k_y k_align n_match dist_total freq_score align    #>   <lgl>    <int> <int> <int>   <int>   <int>      <int> <chr>      <list>   #> 1 TRUE         1     3     2       2       2          0 NA         <tibble> #> 2 TRUE         2     5     2       2       2          0 NA         <tibble> #> 3 FALSE        3     2     2       2       2          2 NA         <tibble> #> 4 FALSE        4     2     2       2       2          2 NA         <tibble> #> 5 TRUE         5     4     3       3       3          1 NA         <tibble>"}]
